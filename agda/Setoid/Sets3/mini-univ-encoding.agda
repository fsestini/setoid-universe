{-# OPTIONS --prop --without-K #-}

module Setoid.Sets3.mini-univ-encoding where

open import Setoid.lib

data in-U : Set ‚Üí Set‚ÇÅ
data in-P : Prop ‚Üí Set‚ÇÅ

data in-U where
  in-ùüö : in-U ùüö
  in-Œ£ : ‚àÄ{A} {B : A ‚Üí Set} {A~ : A ‚Üí A ‚Üí Prop}
          {B~ : {x‚ÇÄ x‚ÇÅ : A}(x‚ÇÄ‚ÇÅ : A~ x‚ÇÄ x‚ÇÅ) ‚Üí B x‚ÇÄ ‚Üí B x‚ÇÅ ‚Üí Prop}
       ‚Üí in-U A ‚Üí (‚àÄ x‚ÇÄ x‚ÇÅ ‚Üí in-P (A~ x‚ÇÄ x‚ÇÅ))
       ‚Üí (‚àÄ x ‚Üí in-U (B x))
       ‚Üí (‚àÄ{x‚ÇÄ x‚ÇÅ} x‚ÇÄ‚ÇÅ (b‚ÇÄ : B x‚ÇÄ) (b‚ÇÅ : B x‚ÇÅ) ‚Üí in-P (B~ x‚ÇÄ‚ÇÅ b‚ÇÄ b‚ÇÅ))
       ‚Üí in-U (Œ£sp ((x : A) -> B x) Œª f ‚Üí
      (x‚ÇÄ x‚ÇÅ : A)(x‚ÇÄ‚ÇÅ : ‚Üëps (A~ x‚ÇÄ x‚ÇÅ)) ‚Üí B~ (un‚Üëps x‚ÇÄ‚ÇÅ) (f x‚ÇÄ) (f x‚ÇÅ))

data in-P where
  in-‚âüùüö : (x y : ùüö) ‚Üí in-P (x ‚âüùüö y)
  in-fun : ‚àÄ{A‚ÇÄ A‚ÇÅ} {B‚ÇÄ : A‚ÇÄ ‚Üí Set} {B‚ÇÅ : A‚ÇÅ ‚Üí Set} {A‚ÇÄ‚ÇÅ : A‚ÇÄ -> A‚ÇÅ -> Prop}
           {B‚ÇÄ‚ÇÅ : ‚àÄ{x‚ÇÄ x‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ x‚ÇÄ x‚ÇÅ) ‚Üí B‚ÇÄ x‚ÇÄ ‚Üí B‚ÇÅ x‚ÇÅ ‚Üí Prop}
         ‚Üí in-U A‚ÇÄ ‚Üí in-U A‚ÇÅ ‚Üí (‚àÄ x y ‚Üí in-P (A‚ÇÄ‚ÇÅ x y))
         ‚Üí (‚àÄ x ‚Üí in-U (B‚ÇÄ x)) ‚Üí (‚àÄ x ‚Üí in-U (B‚ÇÅ x))
         ‚Üí (‚àÄ{x‚ÇÄ x‚ÇÅ} (x‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ x‚ÇÄ x‚ÇÅ) (b‚ÇÄ : B‚ÇÄ x‚ÇÄ) (b‚ÇÅ : B‚ÇÅ x‚ÇÅ) ‚Üí in-P (B‚ÇÄ‚ÇÅ x‚ÇÄ‚ÇÅ b‚ÇÄ b‚ÇÅ))
         ‚Üí (f‚ÇÄ : (a : A‚ÇÄ) ‚Üí B‚ÇÄ a) (f‚ÇÅ : (a : A‚ÇÅ) ‚Üí B‚ÇÅ a)
         ‚Üí in-P ((x‚ÇÄ : A‚ÇÄ)(x‚ÇÅ : A‚ÇÅ)(x‚ÇÄ‚ÇÅ : ‚Üëps (A‚ÇÄ‚ÇÅ x‚ÇÄ x‚ÇÅ)) ‚Üí B‚ÇÄ‚ÇÅ (un‚Üëps x‚ÇÄ‚ÇÅ) (f‚ÇÄ x‚ÇÄ) (f‚ÇÅ x‚ÇÅ))

U = Œ£ _ in-U
P = Œ£ _ in-P

El : U ‚Üí Set
El = proj‚ÇÅ

ElP : P ‚Üí Prop
ElP = proj‚ÇÅ

ùüö-U : U
ùüö-U = _ ,Œ£ in-ùüö

Œ£sp-U : (A : U) (B : El A -> U)
        (A~ : El A -> El A -> P)
        (B~ : {x‚ÇÄ x‚ÇÅ : El A}(x‚ÇÄ‚ÇÅ : ElP (A~ x‚ÇÄ x‚ÇÅ)) ‚Üí El (B x‚ÇÄ) ‚Üí El (B x‚ÇÅ) ‚Üí P)
      ‚Üí U
Œ£sp-U A B A~ B~ = _ ,Œ£ in-Œ£ (proj‚ÇÇ A) (Œª x‚ÇÄ x‚ÇÅ ‚Üí proj‚ÇÇ (A~ x‚ÇÄ x‚ÇÅ)) (Œª x ‚Üí proj‚ÇÇ (B x))
                       Œª x‚ÇÄ‚ÇÅ b‚ÇÄ b‚ÇÅ ‚Üí proj‚ÇÇ (B~ x‚ÇÄ‚ÇÅ b‚ÇÄ b‚ÇÅ)

_‚âüùüö-P_ : ùüö -> ùüö -> P
x ‚âüùüö-P y = _ ,Œ£ in-‚âüùüö x y

fun-‚â°-P : (A‚ÇÄ A‚ÇÅ : U) (A‚ÇÄ‚ÇÅ : El A‚ÇÄ -> El A‚ÇÅ -> P)
          (B‚ÇÄ : El A‚ÇÄ ‚Üí U)(B‚ÇÅ : El A‚ÇÅ -> U)
          (B‚ÇÄ‚ÇÅ : {x‚ÇÄ : El A‚ÇÄ}{x‚ÇÅ : El A‚ÇÅ}(x‚ÇÄ‚ÇÅ : ElP (A‚ÇÄ‚ÇÅ x‚ÇÄ x‚ÇÅ)) ‚Üí El (B‚ÇÄ x‚ÇÄ) ‚Üí El (B‚ÇÅ x‚ÇÅ) ‚Üí P)
          (f‚ÇÄ : (a : El A‚ÇÄ) ‚Üí El (B‚ÇÄ a)) (f‚ÇÅ : (a : El A‚ÇÅ) ‚Üí El (B‚ÇÅ a))
        -> P
fun-‚â°-P A‚ÇÄ A‚ÇÅ A‚ÇÄ‚ÇÅ B‚ÇÄ B‚ÇÅ B‚ÇÄ‚ÇÅ f‚ÇÄ f‚ÇÅ =
  _ ,Œ£ in-fun (proj‚ÇÇ A‚ÇÄ) (proj‚ÇÇ A‚ÇÅ) (Œª x y ‚Üí proj‚ÇÇ (A‚ÇÄ‚ÇÅ x y))
    (Œª x ‚Üí proj‚ÇÇ (B‚ÇÄ x)) (Œª x ‚Üí proj‚ÇÇ (B‚ÇÅ x)) (Œª x‚ÇÄ‚ÇÅ b‚ÇÄ b‚ÇÅ ‚Üí proj‚ÇÇ (B‚ÇÄ‚ÇÅ x‚ÇÄ‚ÇÅ b‚ÇÄ b‚ÇÅ))
    f‚ÇÄ f‚ÇÅ
