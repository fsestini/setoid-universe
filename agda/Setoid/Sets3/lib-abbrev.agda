{-# OPTIONS --prop --without-K #-}

module Setoid.Sets3.lib-abbrev where

open import Setoid.lib
open import Setoid.Sets3.mini-univ
open import Relation.Binary.PropositionalEquality

data in-U : U -> Set‚ÇÅ
data in-U~ : ‚àÄ{A‚ÇÄ A‚ÇÅ} (a‚ÇÄ : in-U A‚ÇÄ)(a‚ÇÅ : in-U A‚ÇÅ)(A‚ÇÄ‚ÇÅ : El A‚ÇÄ -> El A‚ÇÅ -> P) ‚Üí Set‚ÇÅ

record Std : Set‚ÇÅ where
  inductive
  constructor std
  field
    {‚à£_‚à£} : U
    pf : in-U ‚à£_‚à£
    {_~} : El ‚à£_‚à£ ‚Üí El ‚à£_‚à£ ‚Üí P
    pf~ : in-U~ pf pf _~
open Std public

record Std-Rel (A‚ÇÄ A‚ÇÅ : Std) : Set‚ÇÅ where
  inductive
  constructor rel
  field
    {‚à£_‚à£} : El ‚à£ A‚ÇÄ ‚à£ ‚Üí El ‚à£ A‚ÇÅ ‚à£ ‚Üí P
    pf : in-U~ (pf A‚ÇÄ) (pf A‚ÇÅ) ‚à£_‚à£
open Std-Rel public

record IxStd (S : Std) : Set‚ÇÅ where
  inductive
  constructor ixstd
  private
    A = ‚à£ S ‚à£
    A~ = S ~
  field
    {‚à£_‚à£} : El A ‚Üí U
    pf : (x : _) ‚Üí in-U (‚à£_‚à£ x)
    {_~} : ‚àÄ{x‚ÇÄ x‚ÇÅ} (x‚ÇÄ‚ÇÅ : ElP (A~ x‚ÇÄ x‚ÇÅ)) ‚Üí El (‚à£_‚à£ x‚ÇÄ) ‚Üí El (‚à£_‚à£ x‚ÇÅ) ‚Üí P
    pf~ : ‚àÄ{x‚ÇÄ x‚ÇÅ} (x‚ÇÄ‚ÇÅ : ElP (A~ x‚ÇÄ x‚ÇÅ)) ‚Üí in-U~ (pf x‚ÇÄ) (pf x‚ÇÅ) (_~ x‚ÇÄ‚ÇÅ)
open IxStd public

record IxStd-Rel {A‚ÇÄ A‚ÇÅ : Std} (B‚ÇÄ : IxStd A‚ÇÄ) (B‚ÇÅ : IxStd A‚ÇÅ) (A‚ÇÄ‚ÇÅ : Std-Rel A‚ÇÄ A‚ÇÅ) : Set‚ÇÅ where
  inductive
  constructor ixrel
  field
    {‚à£_‚à£} : ‚àÄ{x‚ÇÄ x‚ÇÅ}(x‚ÇÄ‚ÇÅ : ElP (‚à£ A‚ÇÄ‚ÇÅ ‚à£ x‚ÇÄ x‚ÇÅ)) ‚Üí El (‚à£ B‚ÇÄ ‚à£ x‚ÇÄ) ‚Üí El (‚à£ B‚ÇÅ ‚à£ x‚ÇÅ) ‚Üí P
    pf : {x‚ÇÄ : _}{x‚ÇÅ : _} ‚Üí (x‚ÇÄ‚ÇÅ : ElP (Std-Rel.‚à£_‚à£ A‚ÇÄ‚ÇÅ x‚ÇÄ x‚ÇÅ)) ‚Üí in-U~ ((pf B‚ÇÄ) x‚ÇÄ) ((pf B‚ÇÅ) x‚ÇÅ) (‚à£_‚à£ x‚ÇÄ‚ÇÅ)
open IxStd-Rel public

data in-U where
  bool : in-U ùüö-U
  œÄ : (A : Std) ‚Üí (B : IxStd A) ‚Üí in-U (Œ£sp-U ‚à£ A ‚à£ ‚à£ B ‚à£ (A ~) (B ~))

data in-U~ where
  bool~ : in-U~ bool bool (Œª x‚ÇÄ x‚ÇÅ ‚Üí x‚ÇÄ ‚âüùüö-P x‚ÇÅ)
  œÄ~ : ‚àÄ{A‚ÇÄ A‚ÇÅ B‚ÇÄ B‚ÇÅ} (A‚ÇÄ‚ÇÅ : Std-Rel A‚ÇÄ A‚ÇÅ) (B‚ÇÄ‚ÇÅ : IxStd-Rel B‚ÇÄ B‚ÇÅ A‚ÇÄ‚ÇÅ)
    ‚Üí in-U~ (œÄ A‚ÇÄ B‚ÇÄ) (œÄ A‚ÇÅ B‚ÇÅ) Œª f‚ÇÄ f‚ÇÅ ‚Üí fun-‚â°-P _ _ (‚à£ A‚ÇÄ‚ÇÅ ‚à£) _ _ (‚à£ B‚ÇÄ‚ÇÅ ‚à£) (proj‚ÇÅsp f‚ÇÄ) (proj‚ÇÅsp f‚ÇÅ)
