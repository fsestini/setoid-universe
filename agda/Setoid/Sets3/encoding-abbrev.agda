{-# OPTIONS --prop --without-K --rewriting #-}

module Setoid.Sets3.encoding-abbrev where

open import Setoid.lib
import Setoid.Sets3.encoding as E
import Setoid.Sets3.gen-elim as GE
open import Setoid.Sets3.mini-univ
open import Relation.Binary.PropositionalEquality

in-U : U -> Set‚ÇÅ
in-U = E.in-U

in-U~ : ‚àÄ{A‚ÇÄ A‚ÇÅ} (a‚ÇÄ : in-U A‚ÇÄ)(a‚ÇÅ : in-U A‚ÇÅ)(A‚ÇÄ‚ÇÅ : El A‚ÇÄ -> El A‚ÇÅ -> P) ‚Üí Set‚ÇÅ
in-U~ = E.in-U~ _ _

record Std : Set‚ÇÅ where
  inductive
  field
    ‚à£_‚à£ : U
    pf : in-U ‚à£_‚à£
    _~ : El ‚à£_‚à£ ‚Üí El ‚à£_‚à£ ‚Üí P
    pf~ : in-U~ pf pf _~
open Std public

record Std-Rel (A‚ÇÄ A‚ÇÅ : Std) : Set‚ÇÅ where
  inductive
  field
    ‚à£_‚à£ : El ‚à£ A‚ÇÄ ‚à£ ‚Üí El ‚à£ A‚ÇÅ ‚à£ ‚Üí P
    pf : in-U~ (pf A‚ÇÄ) (pf A‚ÇÅ) ‚à£_‚à£
open Std-Rel public

record IxStd (S : Std) : Set‚ÇÅ where
  inductive
  private
    A = ‚à£ S ‚à£
    A~ = S ~
  field
    ‚à£_‚à£ : El A ‚Üí U
    pf : (x : _) ‚Üí in-U (‚à£_‚à£ x)
    _~ : ‚àÄ{x‚ÇÄ x‚ÇÅ} (x‚ÇÄ‚ÇÅ : ElP (A~ x‚ÇÄ x‚ÇÅ)) ‚Üí El (‚à£_‚à£ x‚ÇÄ) ‚Üí El (‚à£_‚à£ x‚ÇÅ) ‚Üí P
    pf~ : ‚àÄ{x‚ÇÄ x‚ÇÅ} (x‚ÇÄ‚ÇÅ : ElP (A~ x‚ÇÄ x‚ÇÅ)) ‚Üí in-U~ (pf x‚ÇÄ) (pf x‚ÇÅ) (_~ x‚ÇÄ‚ÇÅ)
open IxStd public

record IxStd-Rel {A‚ÇÄ A‚ÇÅ : Std} (B‚ÇÄ : IxStd A‚ÇÄ) (B‚ÇÅ : IxStd A‚ÇÅ) (A‚ÇÄ‚ÇÅ : Std-Rel A‚ÇÄ A‚ÇÅ) : Set‚ÇÅ where
  inductive
  field
    ‚à£_‚à£ : ‚àÄ{x‚ÇÄ x‚ÇÅ}(x‚ÇÄ‚ÇÅ : ElP (‚à£ A‚ÇÄ‚ÇÅ ‚à£ x‚ÇÄ x‚ÇÅ)) ‚Üí El (‚à£ B‚ÇÄ ‚à£ x‚ÇÄ) ‚Üí El (‚à£ B‚ÇÅ ‚à£ x‚ÇÅ) ‚Üí P
    pf : {x‚ÇÄ : _}{x‚ÇÅ : _} ‚Üí (x‚ÇÄ‚ÇÅ : ElP (Std-Rel.‚à£_‚à£ A‚ÇÄ‚ÇÅ x‚ÇÄ x‚ÇÅ)) ‚Üí in-U~ ((pf B‚ÇÄ) x‚ÇÄ) ((pf B‚ÇÅ) x‚ÇÅ) (‚à£_‚à£ x‚ÇÄ‚ÇÅ)
open IxStd-Rel public

bool : in-U ùüö-U
bool = E.bool

œÄ : (A : Std) ‚Üí (B : IxStd A) ‚Üí in-U (Œ£sp-U ‚à£ A ‚à£ ‚à£ B ‚à£ (A ~) (B ~))
œÄ A B = E.œÄ (pf A) (pf~ A) (pf B) (pf~ B)

bool~ : in-U~ bool bool (Œª x‚ÇÄ x‚ÇÅ ‚Üí x‚ÇÄ ‚âüùüö-P x‚ÇÅ)
bool~ = E.bool~

œÄ~ : ‚àÄ{A‚ÇÄ A‚ÇÅ B‚ÇÄ B‚ÇÅ} (A‚ÇÄ‚ÇÅ : Std-Rel A‚ÇÄ A‚ÇÅ) (B‚ÇÄ‚ÇÅ : IxStd-Rel B‚ÇÄ B‚ÇÅ A‚ÇÄ‚ÇÅ)
   ‚Üí in-U~ (œÄ A‚ÇÄ B‚ÇÄ) (œÄ A‚ÇÅ B‚ÇÅ) Œª f‚ÇÄ f‚ÇÅ ‚Üí fun-‚â°-P _ _ (‚à£ A‚ÇÄ‚ÇÅ ‚à£) _ _ (‚à£ B‚ÇÄ‚ÇÅ ‚à£) (proj‚ÇÅsp f‚ÇÄ) (proj‚ÇÅsp f‚ÇÅ)
œÄ~ {A‚ÇÄ} {A‚ÇÅ} {B‚ÇÄ} {B‚ÇÅ} A‚ÇÄ‚ÇÅ B‚ÇÄ‚ÇÅ =
  E.œÄ~ {a‚ÇÄ = pf A‚ÇÄ} {a‚ÇÄ~ = pf~ A‚ÇÄ} {a‚ÇÅ = pf A‚ÇÅ} {a‚ÇÅ~ = pf~ A‚ÇÅ} (pf A‚ÇÄ‚ÇÅ)
       {b‚ÇÄ = pf B‚ÇÄ} {b‚ÇÄ~ = pf~ B‚ÇÄ} {b‚ÇÅ = pf B‚ÇÅ} {b‚ÇÅ~ = pf~ B‚ÇÅ} (pf B‚ÇÄ‚ÇÅ)

open import Agda.Primitive

variable i j k l : Level

record GeneralData i j : Set (lsuc (i ‚äî j)) where
  field 
    in-U·¥∞ : ‚àÄ{A} ‚Üí in-U A ‚Üí Set i
    in-U~·¥∞ : ‚àÄ{A‚ÇÄ A‚ÇÅ a‚ÇÄ a‚ÇÅ} {A‚ÇÄ‚ÇÅ : El A‚ÇÄ ‚Üí El A‚ÇÅ ‚Üí P}
           ‚Üí in-U·¥∞ a‚ÇÄ ‚Üí in-U·¥∞ a‚ÇÅ ‚Üí in-U~ a‚ÇÄ a‚ÇÅ A‚ÇÄ‚ÇÅ ‚Üí Set j
  Std·¥∞ : Std ‚Üí Set _
  Std·¥∞ A = Œ£ (in-U·¥∞ (pf A)) (Œª a·¥∞ ‚Üí in-U~·¥∞ a·¥∞ a·¥∞ (pf~ A))
  IxStd·¥∞ : ‚àÄ {A} ‚Üí IxStd A ‚Üí Set _
  IxStd·¥∞ {A} B = Œ£ ((x : _) ‚Üí in-U·¥∞ (pf B x)) Œª b·¥∞ ‚Üí
                   ‚àÄ{x‚ÇÄ x‚ÇÅ}(x‚ÇÄ‚ÇÅ : ElP ((A ~) x‚ÇÄ x‚ÇÅ)) ‚Üí in-U~·¥∞ (b·¥∞ x‚ÇÄ) (b·¥∞ x‚ÇÅ) (pf~ B x‚ÇÄ‚ÇÅ)
  Std-Rel·¥∞ : ‚àÄ{A‚ÇÄ A‚ÇÅ} ‚Üí Std·¥∞ A‚ÇÄ ‚Üí Std·¥∞ A‚ÇÅ ‚Üí Std-Rel A‚ÇÄ A‚ÇÅ ‚Üí Set _
  Std-Rel·¥∞ A‚ÇÄ·¥∞ A‚ÇÅ·¥∞ R = in-U~·¥∞ (proj‚ÇÅ A‚ÇÄ·¥∞) (proj‚ÇÅ A‚ÇÅ·¥∞) (pf R)
  IxStd-Rel·¥∞ : ‚àÄ{A‚ÇÄ A‚ÇÅ B‚ÇÄ B‚ÇÅ} {R : Std-Rel A‚ÇÄ A‚ÇÅ} ‚Üí IxStd·¥∞ B‚ÇÄ ‚Üí IxStd·¥∞ B‚ÇÅ ‚Üí IxStd-Rel B‚ÇÄ B‚ÇÅ R ‚Üí Set _
  IxStd-Rel·¥∞ B‚ÇÄ·¥∞ B‚ÇÅ·¥∞ R' = ‚àÄ {x‚ÇÄ x‚ÇÅ} x‚ÇÄ‚ÇÅ ‚Üí in-U~·¥∞ (proj‚ÇÅ B‚ÇÄ·¥∞ x‚ÇÄ) (proj‚ÇÅ B‚ÇÅ·¥∞ x‚ÇÅ) (pf R' x‚ÇÄ‚ÇÅ)

  field
    bool·¥∞ : in-U·¥∞ bool
    œÄ·¥∞ : ‚àÄ{A B} ‚Üí Std·¥∞ A ‚Üí IxStd·¥∞ B ‚Üí in-U·¥∞ (œÄ A B)
    bool~·¥∞ : in-U~·¥∞ bool·¥∞ bool·¥∞ bool~
    œÄ~·¥∞ : ‚àÄ{A‚ÇÄ A‚ÇÅ} {R : Std-Rel A‚ÇÄ A‚ÇÅ} {B‚ÇÄ : IxStd A‚ÇÄ} {B‚ÇÅ : IxStd A‚ÇÅ} {R' : IxStd-Rel B‚ÇÄ B‚ÇÅ R}
        ‚Üí (A‚ÇÄ·¥∞ : Std·¥∞ A‚ÇÄ) (A‚ÇÅ·¥∞ : Std·¥∞ A‚ÇÅ) (B‚ÇÄ·¥∞ : IxStd·¥∞ B‚ÇÄ) (B‚ÇÅ·¥∞ : IxStd·¥∞ B‚ÇÅ)
        ‚Üí Std-Rel·¥∞ A‚ÇÄ·¥∞ A‚ÇÅ·¥∞ R ‚Üí IxStd-Rel·¥∞ B‚ÇÄ·¥∞ B‚ÇÅ·¥∞ R'
        ‚Üí in-U~·¥∞ (œÄ·¥∞ A‚ÇÄ·¥∞ B‚ÇÄ·¥∞) (œÄ·¥∞ A‚ÇÅ·¥∞ B‚ÇÅ·¥∞) (œÄ~ R R')

module general {i} {j} (dt : GeneralData i j) where

  open GeneralData dt

  open GE.general in-U·¥∞ (Œª a‚ÇÄ·¥∞ a‚ÇÅ·¥∞ x ‚Üí in-U~·¥∞ a‚ÇÄ·¥∞ a‚ÇÅ·¥∞ x)
    bool·¥∞ (Œª a·¥∞ a~·¥∞ b·¥∞ b~·¥∞ ‚Üí œÄ·¥∞ (a·¥∞ ,Œ£ a~·¥∞) (b·¥∞ ,Œ£ b~·¥∞))
    bool~·¥∞ (Œª a‚ÇÄ·¥∞ a‚ÇÄ~·¥∞ a‚ÇÅ·¥∞ a‚ÇÅ~·¥∞ a‚ÇÄ‚ÇÅ·¥∞ b‚ÇÄ·¥∞ b‚ÇÄ~·¥∞ b‚ÇÅ·¥∞ b‚ÇÅ~·¥∞ b‚ÇÄ‚ÇÅ·¥∞
      ‚Üí œÄ~·¥∞ (a‚ÇÄ·¥∞ ,Œ£ a‚ÇÄ~·¥∞) (a‚ÇÅ·¥∞ ,Œ£ a‚ÇÅ~·¥∞) (b‚ÇÄ·¥∞ ,Œ£ b‚ÇÄ~·¥∞) (b‚ÇÅ·¥∞ ,Œ£ b‚ÇÅ~·¥∞) a‚ÇÄ‚ÇÅ·¥∞ b‚ÇÄ‚ÇÅ·¥∞)

  elim-U' : {A : U} (a : in-U A) ‚Üí in-U·¥∞ a
  elim-U' = elim-U

  elim-U~' : ‚àÄ{A‚ÇÄ A‚ÇÅ : U}{a‚ÇÄ : in-U A‚ÇÄ}{a‚ÇÅ : in-U A‚ÇÅ}{A‚ÇÄ‚ÇÅ : El A‚ÇÄ ‚Üí El A‚ÇÅ ‚Üí P}
            (a‚ÇÄ‚ÇÅ : in-U~ a‚ÇÄ a‚ÇÅ A‚ÇÄ‚ÇÅ) ‚Üí in-U~·¥∞ (elim-U' a‚ÇÄ) (elim-U' a‚ÇÅ) a‚ÇÄ‚ÇÅ
  elim-U~' = elim-U~

  elim-Std : (A : Std) ‚Üí Std·¥∞ A
  elim-Std A = elim-U (pf A) ,Œ£ elim-U~ (pf~ A)

  elim-IxStd : ‚àÄ{A} (B : IxStd A) ‚Üí IxStd·¥∞ B
  elim-IxStd B = _ ,Œ£ Œª x‚ÇÄ‚ÇÅ ‚Üí elim-U~ (pf~ B x‚ÇÄ‚ÇÅ)

  elim-StdRel : ‚àÄ{A‚ÇÄ A‚ÇÅ} (R : Std-Rel A‚ÇÄ A‚ÇÅ) ‚Üí Std-Rel·¥∞ (elim-Std A‚ÇÄ) (elim-Std A‚ÇÅ) R
  elim-StdRel R = elim-U~ (pf R)

  elim-IxStdRel : ‚àÄ{A‚ÇÄ A‚ÇÅ B‚ÇÄ B‚ÇÅ} {A‚ÇÄ‚ÇÅ : Std-Rel A‚ÇÄ A‚ÇÅ}
                ‚Üí (B‚ÇÄ‚ÇÅ : IxStd-Rel B‚ÇÄ B‚ÇÅ A‚ÇÄ‚ÇÅ) ‚Üí IxStd-Rel·¥∞ (elim-IxStd B‚ÇÄ) (elim-IxStd B‚ÇÅ) B‚ÇÄ‚ÇÅ
  elim-IxStdRel R' = Œª x‚ÇÄ‚ÇÅ ‚Üí elim-U~ (pf R' x‚ÇÄ‚ÇÅ)

  bool-‚â° : elim-U bool ‚â° bool·¥∞
  bool-‚â° = refl

  œÄ-‚â° : ‚àÄ{A B} ‚Üí elim-U (œÄ A B) ‚â° œÄ·¥∞ (elim-Std A) (elim-IxStd B)
  œÄ-‚â° = refl

  bool~-‚â° : elim-U~ bool~ ‚â° bool~·¥∞
  bool~-‚â° = refl

  œÄ~-‚â° : ‚àÄ{A‚ÇÄ A‚ÇÅ B‚ÇÄ B‚ÇÅ} {A‚ÇÄ‚ÇÅ : Std-Rel A‚ÇÄ A‚ÇÅ} {B‚ÇÄ‚ÇÅ : IxStd-Rel B‚ÇÄ B‚ÇÅ A‚ÇÄ‚ÇÅ}
       ‚Üí elim-U~ (œÄ~ A‚ÇÄ‚ÇÅ B‚ÇÄ‚ÇÅ)
       ‚â° œÄ~·¥∞ (elim-Std A‚ÇÄ) (elim-Std A‚ÇÅ) (elim-IxStd B‚ÇÄ) (elim-IxStd B‚ÇÅ)
             (elim-StdRel A‚ÇÄ‚ÇÅ) (elim-IxStdRel B‚ÇÄ‚ÇÅ)
  œÄ~-‚â° = refl

