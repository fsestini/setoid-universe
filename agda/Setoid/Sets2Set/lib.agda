{-# OPTIONS --without-K --prop #-}

module Setoid.Sets2Set.lib where

-- typing is in Set

open import Setoid.lib

-- preterms

data in-U‚Çö : Set ‚Üí Set‚ÇÅ
data in-U~‚Çö : {A‚ÇÄ A‚ÇÅ : Set}(A‚ÇÄ‚ÇÅ : A‚ÇÄ ‚Üí A‚ÇÅ ‚Üí Prop) ‚Üí Set‚ÇÅ

data in-U‚Çö where
  bool‚Çö : in-U‚Çö ùüö
  œÄ‚Çö :
    {A : Set}(a‚Çö : in-U‚Çö A){A~ : A ‚Üí A ‚Üí Prop}(a~‚Çö : in-U~‚Çö A~)
    {B : A ‚Üí Set}(b‚Çö : (x : A) ‚Üí in-U‚Çö (B x))
    {B~ : {x‚ÇÄ x‚ÇÅ : A}(x‚ÇÄ‚ÇÅ : A~ x‚ÇÄ x‚ÇÅ) ‚Üí B x‚ÇÄ ‚Üí B x‚ÇÅ ‚Üí Prop}
    (b~‚Çö : {x‚ÇÄ x‚ÇÅ : A}(x‚ÇÄ‚ÇÅ : A~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~‚Çö (B~ x‚ÇÄ‚ÇÅ)) ‚Üí 
    in-U‚Çö (Œ£sp ((x : A) ‚Üí B x) (Œª f ‚Üí (x‚ÇÄ x‚ÇÅ : A)(x‚ÇÄ‚ÇÅ : A~ x‚ÇÄ x‚ÇÅ) ‚Üí B~ x‚ÇÄ‚ÇÅ (f x‚ÇÄ) (f x‚ÇÅ)))

data in-U~‚Çö where
  bool~‚Çö : in-U~‚Çö Œª x‚ÇÄ x‚ÇÅ ‚Üí if x‚ÇÄ then (if x‚ÇÅ then ‚ä§p else ‚ä•p) else (if x‚ÇÅ then ‚ä•p else ‚ä§p)
  œÄ~‚Çö :
    {A‚ÇÄ : Set}(a‚ÇÄ : in-U‚Çö A‚ÇÄ){A‚ÇÄ~ : A‚ÇÄ ‚Üí A‚ÇÄ ‚Üí Prop}(a‚ÇÄ~ : in-U~‚Çö A‚ÇÄ~)
    {A‚ÇÅ : Set}(a‚ÇÅ : in-U‚Çö A‚ÇÅ){A‚ÇÅ~ : A‚ÇÅ ‚Üí A‚ÇÅ ‚Üí Prop}(a‚ÇÅ~ : in-U~‚Çö A‚ÇÅ~)
    {A‚ÇÄ‚ÇÅ : A‚ÇÄ ‚Üí A‚ÇÅ ‚Üí Prop}(a‚ÇÄ‚ÇÅ : in-U~‚Çö A‚ÇÄ‚ÇÅ)

    {B‚ÇÄ : A‚ÇÄ ‚Üí Set}(b‚ÇÄ : (x : A‚ÇÄ) ‚Üí in-U‚Çö (B‚ÇÄ x))
      {B‚ÇÄ~ : {x‚ÇÄ x‚ÇÅ : A‚ÇÄ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ~ x‚ÇÄ x‚ÇÅ) ‚Üí B‚ÇÄ x‚ÇÄ ‚Üí B‚ÇÄ x‚ÇÅ ‚Üí Prop}
      (b‚ÇÄ~ : {x‚ÇÄ x‚ÇÅ : A‚ÇÄ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~‚Çö (B‚ÇÄ~ x‚ÇÄ‚ÇÅ))
    {B‚ÇÅ : A‚ÇÅ ‚Üí Set}(b‚ÇÅ : (x : A‚ÇÅ) ‚Üí in-U‚Çö (B‚ÇÅ x))
      {B‚ÇÅ~ : {x‚ÇÄ x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÅ~ x‚ÇÄ x‚ÇÅ) ‚Üí B‚ÇÅ x‚ÇÄ ‚Üí B‚ÇÅ x‚ÇÅ ‚Üí Prop}
      (b‚ÇÅ~ : {x‚ÇÄ x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÅ~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~‚Çö (B‚ÇÅ~ x‚ÇÄ‚ÇÅ))
    {B‚ÇÄ‚ÇÅ : {x‚ÇÄ : A‚ÇÄ}{x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ x‚ÇÄ x‚ÇÅ) ‚Üí B‚ÇÄ x‚ÇÄ ‚Üí B‚ÇÅ x‚ÇÅ ‚Üí Prop}
    (b‚ÇÄ‚ÇÅ : {x‚ÇÄ : A‚ÇÄ}{x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~‚Çö (B‚ÇÄ‚ÇÅ x‚ÇÄ‚ÇÅ)) ‚Üí 
     
    in-U~‚Çö
      {Œ£sp ((x : A‚ÇÄ) ‚Üí B‚ÇÄ x) (Œª f ‚Üí (x‚ÇÄ x‚ÇÅ : A‚ÇÄ)(x‚ÇÄ‚ÇÅ : A‚ÇÄ~ x‚ÇÄ x‚ÇÅ) ‚Üí B‚ÇÄ~ x‚ÇÄ‚ÇÅ (f x‚ÇÄ) (f x‚ÇÅ))}
      {Œ£sp ((x : A‚ÇÅ) ‚Üí B‚ÇÅ x) (Œª f ‚Üí (x‚ÇÄ x‚ÇÅ : A‚ÇÅ)(x‚ÇÄ‚ÇÅ : A‚ÇÅ~ x‚ÇÄ x‚ÇÅ) ‚Üí B‚ÇÅ~ x‚ÇÄ‚ÇÅ (f x‚ÇÄ) (f x‚ÇÅ))}
      (Œª {(f‚ÇÄ ,sp f‚ÇÄ~) (f‚ÇÅ ,sp f‚ÇÅ~) ‚Üí (x‚ÇÄ : A‚ÇÄ)(x‚ÇÅ : A‚ÇÅ)(x‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ x‚ÇÄ x‚ÇÅ) ‚Üí B‚ÇÄ‚ÇÅ x‚ÇÄ‚ÇÅ (f‚ÇÄ x‚ÇÄ) (f‚ÇÅ x‚ÇÅ)})

-- typing predicates

open import Agda.Primitive

data _‚â°_ {‚Ñì}{A : Set ‚Ñì} (x : A) : A ‚Üí Set ‚Ñì where
  refl : x ‚â° x
infix 8 _‚â°_

record ‚Üël {‚Ñì ‚Ñì'}(A : Set ‚Ñì) : Set (‚Ñì ‚äî ‚Ñì') where
  constructor mk‚Üël
  field
    un‚Üël : A
open ‚Üël public

in-U‚Çú : {A : Set} ‚Üí in-U‚Çö A ‚Üí Set‚ÇÅ
in-U~‚Çú : {A‚ÇÄ A‚ÇÅ : Set}(a‚ÇÄ : in-U‚Çö A‚ÇÄ)(a‚ÇÅ : in-U‚Çö A‚ÇÅ){A‚ÇÄ‚ÇÅ : A‚ÇÄ ‚Üí A‚ÇÅ ‚Üí Prop} ‚Üí in-U~‚Çö A‚ÇÄ‚ÇÅ ‚Üí Set‚ÇÅ

in-U‚Çú bool‚Çö = ‚Üël ‚ä§
in-U‚Çú (œÄ‚Çö {A} a‚Çö {A~} a~‚Çö {B} b‚Çö {B~} b~‚Çö) =
  in-U‚Çú a‚Çö √ó
  in-U~‚Çú a‚Çö a‚Çö a~‚Çö √ó
  ((x : A) ‚Üí in-U‚Çú (b‚Çö x)) √ó
  ({x‚ÇÄ x‚ÇÅ : A}(x‚ÇÄ‚ÇÅ : A~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~‚Çú (b‚Çö x‚ÇÄ) (b‚Çö x‚ÇÅ) (b~‚Çö x‚ÇÄ‚ÇÅ))
in-U~‚Çú a‚ÇÄ a‚ÇÅ bool~‚Çö = a‚ÇÄ ‚â° bool‚Çö √ó a‚ÇÅ ‚â° bool‚Çö
in-U~‚Çú c‚ÇÄ c‚ÇÅ (œÄ~‚Çö {A‚ÇÄ} a‚ÇÄ‚Çö {A‚ÇÄ~} a‚ÇÄ~‚Çö {A‚ÇÅ} a‚ÇÅ‚Çö {A‚ÇÅ~} a‚ÇÅ~‚Çö {A‚ÇÄ‚ÇÅ} a‚ÇÄ‚ÇÅ‚Çö {B‚ÇÄ} b‚ÇÄ‚Çö {B‚ÇÄ~} b‚ÇÄ~‚Çö {B‚ÇÅ} b‚ÇÅ‚Çö {B‚ÇÅ~} b‚ÇÅ~‚Çö {B‚ÇÄ‚ÇÅ} b‚ÇÄ‚ÇÅ‚Çö) =
  c‚ÇÄ ‚â° œÄ‚Çö a‚ÇÄ‚Çö a‚ÇÄ~‚Çö b‚ÇÄ‚Çö b‚ÇÄ~‚Çö √ó
  c‚ÇÅ ‚â° œÄ‚Çö a‚ÇÅ‚Çö a‚ÇÅ~‚Çö b‚ÇÅ‚Çö b‚ÇÅ~‚Çö √ó
  in-U‚Çú a‚ÇÄ‚Çö √ó
  in-U~‚Çú a‚ÇÄ‚Çö a‚ÇÄ‚Çö a‚ÇÄ~‚Çö √ó
  in-U‚Çú a‚ÇÅ‚Çö √ó
  in-U~‚Çú a‚ÇÅ‚Çö a‚ÇÅ‚Çö a‚ÇÅ~‚Çö √ó
  in-U~‚Çú a‚ÇÄ‚Çö a‚ÇÅ‚Çö a‚ÇÄ‚ÇÅ‚Çö √ó
  ((x : A‚ÇÄ) ‚Üí in-U‚Çú (b‚ÇÄ‚Çö x)) √ó
  ({x‚ÇÄ x‚ÇÅ : A‚ÇÄ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~‚Çú (b‚ÇÄ‚Çö x‚ÇÄ) (b‚ÇÄ‚Çö x‚ÇÅ) (b‚ÇÄ~‚Çö x‚ÇÄ‚ÇÅ)) √ó
  ((x : A‚ÇÅ) ‚Üí in-U‚Çú (b‚ÇÅ‚Çö x)) √ó
  ({x‚ÇÄ x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÅ~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~‚Çú (b‚ÇÅ‚Çö x‚ÇÄ) (b‚ÇÅ‚Çö x‚ÇÅ) (b‚ÇÅ~‚Çö x‚ÇÄ‚ÇÅ)) √ó
  ({x‚ÇÄ : A‚ÇÄ}{x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~‚Çú (b‚ÇÄ‚Çö x‚ÇÄ) (b‚ÇÅ‚Çö x‚ÇÅ) (b‚ÇÄ‚ÇÅ‚Çö x‚ÇÄ‚ÇÅ))

module tryToProveThatTypingIsProp where

  ap : ‚àÄ{‚Ñì ‚Ñì'}{A : Set ‚Ñì}{B : Set ‚Ñì'}(f : A ‚Üí B){a‚ÇÄ a‚ÇÅ : A}(a‚ÇÇ : a‚ÇÄ ‚â° a‚ÇÅ)
      ‚Üí f a‚ÇÄ ‚â° f a‚ÇÅ
  ap f refl = refl

  _‚óæ_ : ‚àÄ{‚Ñì}{A : Set ‚Ñì}{x y z : A} ‚Üí x ‚â° y ‚Üí y ‚â° z ‚Üí x ‚â° z
  refl ‚óæ refl = refl
  infixl 4 _‚óæ_

  F : ‚àÄ{i} ‚Üí Set i ‚Üí Set i
  F A = A ‚Üí A ‚Üí A

  fst : ‚àÄ{i}{A : Set i} ‚Üí F A
  fst = Œª x x' ‚Üí x

  snd : ‚àÄ{i}{A : Set i} ‚Üí F A
  snd = Œª x x' ‚Üí x'

  isprop : ‚àÄ{i} ‚Üí Set i ‚Üí Set i
  isprop A = _‚â°_ {A = F A} fst snd

  fst1 : ‚àÄ{i}{A : Set i}{j}{B : A ‚Üí Set j} ‚Üí (x : A) ‚Üí F (B x)
  fst1 x y y' = y

  snd1 : ‚àÄ{i}{A : Set i}{j}{B : A ‚Üí Set j} ‚Üí (x : A) ‚Üí F (B x)
  snd1 x y y' = y'

  isprop1 : ‚àÄ{i}{A : Set i}{j}(B : A ‚Üí Set j) ‚Üí Set (i ‚äî j)
  isprop1 {_}{A} B = _‚â°_ {A = (x : A) ‚Üí F (B x)} fst1 snd1

  isprop√ó : ‚àÄ{i}{A : Set i}{j}{B : Set j} ‚Üí isprop A ‚Üí isprop B ‚Üí isprop (A √ó B)
  isprop√ó {A = A}{B = B} pA pB =
    ap (Œª z ‚Üí Œª (w w' : A √ó B) ‚Üí (z (proj‚ÇÅ w) (proj‚ÇÅ w') ,Œ£ proj‚ÇÇ w))  pA ‚óæ
    ap (Œª z ‚Üí Œª (w w' : A √ó B) ‚Üí (proj‚ÇÅ w' ,Œ£ z (proj‚ÇÇ w) (proj‚ÇÇ w'))) pB

  ispropŒ† : ‚àÄ{i}{A : Set i}{j}{B : A ‚Üí Set j} ‚Üí isprop1 B ‚Üí isprop ((x : A) ‚Üí B x)
  ispropŒ† pB = ap (Œª z ‚Üí Œª f f' x ‚Üí z x (f x) (f' x)) pB

  ispropU : ‚àÄ{A}(a‚Çö : in-U‚Çö A) ‚Üí isprop (in-U‚Çú {A} a‚Çö)
  ispropU bool‚Çö = refl
  ispropU (œÄ‚Çö a‚Çö a~‚Çö b‚Çö b~‚Çö) = isprop√ó (isprop√ó (isprop√ó (ispropU a‚Çö) {!!}) (ispropŒ† {!ispropU !})) {!!}
  {-
  ispropU1 : ‚àÄ{I : Set}{A}(a‚Çö : I ‚Üí in-U‚Çö A) ‚Üí isprop1 (Œª z ‚Üí in-U‚Çú {A} (a‚Çö z))
  ispropU1 bool‚Çö = refl
  ispropU1 (œÄ‚Çö a‚Çö a~‚Çö b‚Çö b~‚Çö) = isprop√ó (isprop√ó (isprop√ó (ispropU a‚Çö) {!!}) (ispropŒ† {!ispropU !})) {!!}
  -}

-- reconstructing the IIT

in-U : Set ‚Üí Set‚ÇÅ
in-U A = Œ£ (in-U‚Çö A) in-U‚Çú

in-U~ : {A‚ÇÄ A‚ÇÅ : Set}(a‚ÇÄ : in-U A‚ÇÄ)(a‚ÇÅ : in-U A‚ÇÅ)(A‚ÇÄ‚ÇÅ : A‚ÇÄ ‚Üí A‚ÇÅ ‚Üí Prop) ‚Üí Set‚ÇÅ
in-U~ {A‚ÇÄ}{A‚ÇÅ}(a‚ÇÄ‚Çö ,Œ£ a‚ÇÄ)(a‚ÇÅ‚Çö ,Œ£ a‚ÇÅ) A‚ÇÄ‚ÇÅ = Œ£ (in-U~‚Çö A‚ÇÄ‚ÇÅ) (in-U~‚Çú a‚ÇÄ‚Çö a‚ÇÅ‚Çö)

bool : in-U ùüö
bool = bool‚Çö ,Œ£ mk‚Üël tt

œÄ : {A : Set}(a : in-U A){A~ : A ‚Üí A ‚Üí Prop}(a~ : in-U~ a a A~)
    {B : A ‚Üí Set}(b : (x : A) ‚Üí in-U (B x))
    {B~ : {x‚ÇÄ x‚ÇÅ : A}(x‚ÇÄ‚ÇÅ : A~ x‚ÇÄ x‚ÇÅ) ‚Üí B x‚ÇÄ ‚Üí B x‚ÇÅ ‚Üí Prop}
    (b~ : {x‚ÇÄ x‚ÇÅ : A}(x‚ÇÄ‚ÇÅ : A~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~ (b x‚ÇÄ) (b x‚ÇÅ) (B~ x‚ÇÄ‚ÇÅ)) ‚Üí
    in-U (Œ£sp ((x : A) ‚Üí B x) (Œª f ‚Üí (x‚ÇÄ x‚ÇÅ : A)(x‚ÇÄ‚ÇÅ : A~ x‚ÇÄ x‚ÇÅ) ‚Üí B~ x‚ÇÄ‚ÇÅ (f x‚ÇÄ) (f x‚ÇÅ)))
œÄ {A}(a‚Çö ,Œ£ a){A~}(a~‚Çö ,Œ£ a~){B} b {B~} b~ =
  œÄ‚Çö a‚Çö a~‚Çö (Œª x ‚Üí proj‚ÇÅ (b x)) (Œª x‚ÇÄ‚ÇÅ ‚Üí proj‚ÇÅ (b~ x‚ÇÄ‚ÇÅ)) ,Œ£
  (a ,Œ£ a~ ,Œ£ (Œª x ‚Üí proj‚ÇÇ (b x)) ,Œ£ Œª x‚ÇÄ‚ÇÅ ‚Üí proj‚ÇÇ (b~ x‚ÇÄ‚ÇÅ))

bool~ : in-U~ bool bool Œª x‚ÇÄ x‚ÇÅ ‚Üí if x‚ÇÄ then (if x‚ÇÅ then ‚ä§p else ‚ä•p) else (if x‚ÇÅ then ‚ä•p else ‚ä§p)
bool~ = bool~‚Çö ,Œ£ (refl ,Œ£ refl)

œÄ~ :
  {A‚ÇÄ : Set}{a‚ÇÄ : in-U A‚ÇÄ}{A‚ÇÄ~ : A‚ÇÄ ‚Üí A‚ÇÄ ‚Üí Prop}{a‚ÇÄ~ : in-U~ a‚ÇÄ a‚ÇÄ A‚ÇÄ~}
  {A‚ÇÅ : Set}{a‚ÇÅ : in-U A‚ÇÅ}{A‚ÇÅ~ : A‚ÇÅ ‚Üí A‚ÇÅ ‚Üí Prop}{a‚ÇÅ~ : in-U~ a‚ÇÅ a‚ÇÅ A‚ÇÅ~}
  {A‚ÇÄ‚ÇÅ : A‚ÇÄ ‚Üí A‚ÇÅ ‚Üí Prop}(a‚ÇÄ‚ÇÅ : in-U~ a‚ÇÄ a‚ÇÅ A‚ÇÄ‚ÇÅ)
  {B‚ÇÄ : A‚ÇÄ ‚Üí Set}{b‚ÇÄ : (x‚ÇÄ : A‚ÇÄ) ‚Üí in-U (B‚ÇÄ x‚ÇÄ)}
    {B‚ÇÄ~ : {x‚ÇÄ x‚ÇÅ : A‚ÇÄ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ~ x‚ÇÄ x‚ÇÅ) ‚Üí B‚ÇÄ x‚ÇÄ ‚Üí B‚ÇÄ x‚ÇÅ ‚Üí Prop}
    {b‚ÇÄ~ : {x‚ÇÄ x‚ÇÅ : A‚ÇÄ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~ (b‚ÇÄ x‚ÇÄ) (b‚ÇÄ x‚ÇÅ) (B‚ÇÄ~ x‚ÇÄ‚ÇÅ)}
  {B‚ÇÅ : A‚ÇÅ ‚Üí Set}{b‚ÇÅ : (x‚ÇÅ : A‚ÇÅ) ‚Üí in-U (B‚ÇÅ x‚ÇÅ)}
    {B‚ÇÅ~ : {x‚ÇÄ x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÅ~ x‚ÇÄ x‚ÇÅ) ‚Üí B‚ÇÅ x‚ÇÄ ‚Üí B‚ÇÅ x‚ÇÅ ‚Üí Prop}
    {b‚ÇÅ~ : {x‚ÇÄ x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÅ~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~ (b‚ÇÅ x‚ÇÄ) (b‚ÇÅ x‚ÇÅ) (B‚ÇÅ~ x‚ÇÄ‚ÇÅ)}
  {B‚ÇÄ‚ÇÅ : {x‚ÇÄ : A‚ÇÄ}{x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ x‚ÇÄ x‚ÇÅ) ‚Üí B‚ÇÄ x‚ÇÄ ‚Üí B‚ÇÅ x‚ÇÅ ‚Üí Prop}
  (b‚ÇÄ‚ÇÅ : {x‚ÇÄ : A‚ÇÄ}{x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~ (b‚ÇÄ x‚ÇÄ) (b‚ÇÅ x‚ÇÅ) (B‚ÇÄ‚ÇÅ x‚ÇÄ‚ÇÅ)) ‚Üí 
  in-U~ (œÄ a‚ÇÄ a‚ÇÄ~ b‚ÇÄ {B‚ÇÄ~} b‚ÇÄ~)
        (œÄ a‚ÇÅ a‚ÇÅ~ b‚ÇÅ {B‚ÇÅ~} b‚ÇÅ~)
        (Œª {(f‚ÇÄ ,sp f‚ÇÄ~) (f‚ÇÅ ,sp f‚ÇÅ~) ‚Üí (x‚ÇÄ : A‚ÇÄ)(x‚ÇÅ : A‚ÇÅ)(x‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ x‚ÇÄ x‚ÇÅ) ‚Üí B‚ÇÄ‚ÇÅ x‚ÇÄ‚ÇÅ (f‚ÇÄ x‚ÇÄ) (f‚ÇÅ x‚ÇÅ)})
œÄ~ {A‚ÇÄ}{a‚ÇÄ‚Çö ,Œ£ a‚ÇÄ}{A‚ÇÄ~}{a‚ÇÄ~‚Çö ,Œ£ a‚ÇÄ~}{A‚ÇÅ}{a‚ÇÅ‚Çö ,Œ£ a‚ÇÅ}{A‚ÇÅ~}{a‚ÇÅ~‚Çö ,Œ£ a‚ÇÅ~}{A‚ÇÄ‚ÇÅ}(a‚ÇÄ‚ÇÅ‚Çö ,Œ£ a‚ÇÄ‚ÇÅ){B‚ÇÄ}{b‚ÇÄ}{B‚ÇÄ~}{b‚ÇÄ~}{B‚ÇÅ}{b‚ÇÅ}{B‚ÇÅ~}{b‚ÇÅ~}{B‚ÇÄ‚ÇÅ} b‚ÇÄ‚ÇÅ =
  œÄ~‚Çö a‚ÇÄ‚Çö a‚ÇÄ~‚Çö a‚ÇÅ‚Çö a‚ÇÅ~‚Çö a‚ÇÄ‚ÇÅ‚Çö (Œª x ‚Üí proj‚ÇÅ (b‚ÇÄ x)) (Œª x‚ÇÄ‚ÇÅ ‚Üí proj‚ÇÅ (b‚ÇÄ~ x‚ÇÄ‚ÇÅ)) (Œª x ‚Üí proj‚ÇÅ (b‚ÇÅ x)) (Œª x‚ÇÄ‚ÇÅ ‚Üí proj‚ÇÅ (b‚ÇÅ~ x‚ÇÄ‚ÇÅ)) (Œª x‚ÇÄ‚ÇÅ ‚Üí proj‚ÇÅ (b‚ÇÄ‚ÇÅ x‚ÇÄ‚ÇÅ)) ,Œ£
  (refl ,Œ£ refl ,Œ£ a‚ÇÄ ,Œ£ a‚ÇÄ~ ,Œ£ a‚ÇÅ ,Œ£ a‚ÇÅ~ ,Œ£ a‚ÇÄ‚ÇÅ ,Œ£ (Œª x ‚Üí proj‚ÇÇ (b‚ÇÄ x)) ,Œ£ (Œª x‚ÇÄ‚ÇÅ ‚Üí proj‚ÇÇ (b‚ÇÄ~ x‚ÇÄ‚ÇÅ)) ,Œ£ (Œª x ‚Üí proj‚ÇÇ (b‚ÇÅ x)) ,Œ£ (Œª x‚ÇÄ‚ÇÅ ‚Üí proj‚ÇÇ (b‚ÇÅ~ x‚ÇÄ‚ÇÅ)) ,Œ£ Œª x‚ÇÄ‚ÇÅ ‚Üí proj‚ÇÇ (b‚ÇÄ‚ÇÅ x‚ÇÄ‚ÇÅ))

-- simple eliminator

module props
  {i}
  {j}
  (in-U·¥∞ : ‚àÄ{A : Set} ‚Üí in-U A ‚Üí Set i)
  (in-U~·¥∞ : {A‚ÇÄ A‚ÇÅ : Set}{a‚ÇÄ : in-U A‚ÇÄ}{a‚ÇÅ : in-U A‚ÇÅ}{A‚ÇÄ‚ÇÅ : A‚ÇÄ ‚Üí A‚ÇÅ ‚Üí Prop} ‚Üí in-U~ a‚ÇÄ a‚ÇÅ A‚ÇÄ‚ÇÅ ‚Üí Set j)
  (bool·¥∞ : in-U·¥∞ bool)
  (œÄ·¥∞ : {A : Set}{a : in-U A}(a·¥∞ : in-U·¥∞ a){A~ : A ‚Üí A ‚Üí Prop}{a~ : in-U~ a a A~}(a~·¥∞ : in-U~·¥∞ {a‚ÇÄ = a}{a‚ÇÅ = a} a~)
    {B : A ‚Üí Set}{b : (x : A) ‚Üí in-U (B x)}(b·¥∞ : (x : A) ‚Üí in-U·¥∞ (b x))
    {B~ : {x‚ÇÄ x‚ÇÅ : A}(x‚ÇÄ‚ÇÅ : A~ x‚ÇÄ x‚ÇÅ) ‚Üí B x‚ÇÄ ‚Üí B x‚ÇÅ ‚Üí Prop}
    {b~ : {x‚ÇÄ x‚ÇÅ : A}(x‚ÇÄ‚ÇÅ : A~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~ (b x‚ÇÄ) (b x‚ÇÅ) (B~ x‚ÇÄ‚ÇÅ)}
    (b~·¥∞ : {x‚ÇÄ x‚ÇÅ : A}(x‚ÇÄ‚ÇÅ : A~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~·¥∞ {a‚ÇÄ = b x‚ÇÄ}{a‚ÇÅ = b x‚ÇÅ}(b~ x‚ÇÄ‚ÇÅ)) ‚Üí 
    in-U·¥∞ (œÄ a a~ b b~))
  (bool~·¥∞ : in-U~·¥∞ {a‚ÇÄ = bool}{a‚ÇÅ = bool} bool~)
  (œÄ~·¥∞ : {A‚ÇÄ : Set}{a‚ÇÄ : in-U A‚ÇÄ}(a‚ÇÄ·¥∞ : in-U·¥∞ a‚ÇÄ){A‚ÇÄ~ : A‚ÇÄ ‚Üí A‚ÇÄ ‚Üí Prop}{a‚ÇÄ~ : in-U~ a‚ÇÄ a‚ÇÄ A‚ÇÄ~}(a‚ÇÄ~·¥∞ : in-U~·¥∞ {a‚ÇÄ = a‚ÇÄ}{a‚ÇÅ = a‚ÇÄ} a‚ÇÄ~)
    {A‚ÇÅ : Set}{a‚ÇÅ : in-U A‚ÇÅ}(a‚ÇÅ·¥∞ : in-U·¥∞ a‚ÇÅ){A‚ÇÅ~ : A‚ÇÅ ‚Üí A‚ÇÅ ‚Üí Prop}{a‚ÇÅ~ : in-U~ a‚ÇÅ a‚ÇÅ A‚ÇÅ~}(a‚ÇÅ~·¥∞ : in-U~·¥∞ {a‚ÇÄ = a‚ÇÅ}{a‚ÇÅ = a‚ÇÅ} a‚ÇÅ~)
    {A‚ÇÄ‚ÇÅ : A‚ÇÄ ‚Üí A‚ÇÅ ‚Üí Prop}{a‚ÇÄ‚ÇÅ : in-U~ a‚ÇÄ a‚ÇÅ A‚ÇÄ‚ÇÅ}(a‚ÇÄ‚ÇÅ·¥∞ : in-U~·¥∞ {a‚ÇÄ = a‚ÇÄ}{a‚ÇÅ = a‚ÇÅ} a‚ÇÄ‚ÇÅ)
    {B‚ÇÄ : A‚ÇÄ ‚Üí Set}{b‚ÇÄ : (x‚ÇÄ : A‚ÇÄ) ‚Üí in-U (B‚ÇÄ x‚ÇÄ)}(b‚ÇÄ·¥∞ : (x‚ÇÄ : A‚ÇÄ) ‚Üí in-U·¥∞ (b‚ÇÄ x‚ÇÄ))
      {B‚ÇÄ~ : {x‚ÇÄ x‚ÇÅ : A‚ÇÄ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ~ x‚ÇÄ x‚ÇÅ) ‚Üí B‚ÇÄ x‚ÇÄ ‚Üí B‚ÇÄ x‚ÇÅ ‚Üí Prop}
      {b‚ÇÄ~ : {x‚ÇÄ x‚ÇÅ : A‚ÇÄ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~ (b‚ÇÄ x‚ÇÄ) (b‚ÇÄ x‚ÇÅ) (B‚ÇÄ~ x‚ÇÄ‚ÇÅ)}
      (b‚ÇÄ~·¥∞ : {x‚ÇÄ x‚ÇÅ : A‚ÇÄ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~·¥∞ {a‚ÇÄ = b‚ÇÄ x‚ÇÄ}{a‚ÇÅ = b‚ÇÄ x‚ÇÅ} (b‚ÇÄ~ x‚ÇÄ‚ÇÅ))
    {B‚ÇÅ : A‚ÇÅ ‚Üí Set}{b‚ÇÅ : (x‚ÇÅ : A‚ÇÅ) ‚Üí in-U (B‚ÇÅ x‚ÇÅ)}(b‚ÇÅ·¥∞ : (x‚ÇÅ : A‚ÇÅ) ‚Üí in-U·¥∞ (b‚ÇÅ x‚ÇÅ))
      {B‚ÇÅ~ : {x‚ÇÄ x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÅ~ x‚ÇÄ x‚ÇÅ) ‚Üí B‚ÇÅ x‚ÇÄ ‚Üí B‚ÇÅ x‚ÇÅ ‚Üí Prop}
      {b‚ÇÅ~ : {x‚ÇÄ x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÅ~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~ (b‚ÇÅ x‚ÇÄ) (b‚ÇÅ x‚ÇÅ) (B‚ÇÅ~ x‚ÇÄ‚ÇÅ)}
      (b‚ÇÅ~·¥∞ : {x‚ÇÄ x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÅ~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~·¥∞ {a‚ÇÄ = b‚ÇÅ x‚ÇÄ}{a‚ÇÅ = b‚ÇÅ x‚ÇÅ} (b‚ÇÅ~ x‚ÇÄ‚ÇÅ))
    {B‚ÇÄ‚ÇÅ : {x‚ÇÄ : A‚ÇÄ}{x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ x‚ÇÄ x‚ÇÅ) ‚Üí B‚ÇÄ x‚ÇÄ ‚Üí B‚ÇÅ x‚ÇÅ ‚Üí Prop}
    {b‚ÇÄ‚ÇÅ : {x‚ÇÄ : A‚ÇÄ}{x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~ (b‚ÇÄ x‚ÇÄ) (b‚ÇÅ x‚ÇÅ) (B‚ÇÄ‚ÇÅ x‚ÇÄ‚ÇÅ)}
    (b‚ÇÄ‚ÇÅ·¥∞ : {x‚ÇÄ : A‚ÇÄ}{x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~·¥∞ {a‚ÇÄ = b‚ÇÄ x‚ÇÄ}{a‚ÇÅ = b‚ÇÅ x‚ÇÅ} (b‚ÇÄ‚ÇÅ x‚ÇÄ‚ÇÅ)) ‚Üí 
    in-U~·¥∞ {a‚ÇÄ = œÄ a‚ÇÄ a‚ÇÄ~ b‚ÇÄ b‚ÇÄ~}{a‚ÇÅ = œÄ a‚ÇÅ a‚ÇÅ~ b‚ÇÅ b‚ÇÅ~} (œÄ~ {a‚ÇÄ = a‚ÇÄ}{a‚ÇÄ~ = a‚ÇÄ~}{a‚ÇÅ = a‚ÇÅ}{a‚ÇÅ~ = a‚ÇÅ~} a‚ÇÄ‚ÇÅ {b‚ÇÄ = b‚ÇÄ}{b‚ÇÄ~ = b‚ÇÄ~}{b‚ÇÅ = b‚ÇÅ}{b‚ÇÅ~ = b‚ÇÅ~} b‚ÇÄ‚ÇÅ))
  where

  ind-in-U : ‚àÄ{A : Set}(a : in-U A) ‚Üí in-U·¥∞ a
  ind-in-U~ : ‚àÄ{A‚ÇÄ A‚ÇÅ : Set}{a‚ÇÄ : in-U A‚ÇÄ}{a‚ÇÅ : in-U A‚ÇÅ}{A‚ÇÄ‚ÇÅ : A‚ÇÄ ‚Üí A‚ÇÅ ‚Üí Prop}(a‚ÇÄ‚ÇÅ : in-U~ a‚ÇÄ a‚ÇÅ A‚ÇÄ‚ÇÅ) ‚Üí in-U~·¥∞ {a‚ÇÄ = a‚ÇÄ}{a‚ÇÅ = a‚ÇÅ} a‚ÇÄ‚ÇÅ
  ind-in-U (bool‚Çö ,Œ£ _) = bool·¥∞
  ind-in-U (œÄ‚Çö {A} a‚Çö {A~} a~‚Çö {B} b‚Çö {B~} b~‚Çö ,Œ£ (a ,Œ£ a~ ,Œ£ b ,Œ£ b~)) =
    œÄ·¥∞ (ind-in-U (a‚Çö ,Œ£ a)) (ind-in-U~ (a~‚Çö ,Œ£ a~)) (Œª x ‚Üí ind-in-U (b‚Çö x ,Œ£ b x)) (Œª x‚ÇÄ‚ÇÅ ‚Üí ind-in-U~ (b~‚Çö x‚ÇÄ‚ÇÅ ,Œ£ b~ x‚ÇÄ‚ÇÅ))
  ind-in-U~ {a‚ÇÄ = a‚ÇÄ‚Çö ,Œ£ a‚ÇÄ}{a‚ÇÅ = a‚ÇÅ‚Çö ,Œ£ a‚ÇÅ} (bool~‚Çö ,Œ£ (refl ,Œ£ refl)) = bool~·¥∞
  ind-in-U~ {a‚ÇÄ = c‚ÇÄ‚Çö ,Œ£ c‚ÇÄ}{a‚ÇÅ = c‚ÇÅ‚Çö ,Œ£ c‚ÇÅ}
    (œÄ~‚Çö a‚ÇÄ‚Çö a‚ÇÄ~‚Çö a‚ÇÅ‚Çö a‚ÇÅ~‚Çö a‚ÇÄ‚ÇÅ‚Çö b‚ÇÄ‚Çö b‚ÇÄ~‚Çö b‚ÇÅ‚Çö b‚ÇÅ~‚Çö b‚ÇÄ‚ÇÅ‚Çö ,Œ£
    (refl ,Œ£ refl ,Œ£ a‚ÇÄ ,Œ£ a‚ÇÄ~ ,Œ£ a‚ÇÅ ,Œ£ a‚ÇÅ~ ,Œ£ a‚ÇÄ‚ÇÅ ,Œ£ b‚ÇÄ ,Œ£ b‚ÇÄ~ ,Œ£ b‚ÇÅ ,Œ£ b‚ÇÅ~ ,Œ£ b‚ÇÄ‚ÇÅ)) =
    {!œÄ~·¥∞
      (ind-in-U (a‚ÇÄ‚Çö ,Œ£ a‚ÇÄ))
      (ind-in-U~ (a‚ÇÄ~‚Çö ,Œ£ a‚ÇÄ~))
      (ind-in-U (a‚ÇÅ‚Çö ,Œ£ a‚ÇÅ))
      (ind-in-U~ (a‚ÇÅ~‚Çö ,Œ£ a‚ÇÅ~))
      (ind-in-U~ (a‚ÇÄ‚ÇÅ‚Çö ,Œ£ a‚ÇÄ‚ÇÅ))
      (Œª x ‚Üí ind-in-U (b‚ÇÄ‚Çö x ,Œ£ b‚ÇÄ x))
      (Œª x‚ÇÄ‚ÇÅ ‚Üí ind-in-U~ (b‚ÇÄ~‚Çö x‚ÇÄ‚ÇÅ ,Œ£ b‚ÇÄ~ x‚ÇÄ‚ÇÅ))
      (Œª x ‚Üí ind-in-U (b‚ÇÅ‚Çö x ,Œ£ b‚ÇÅ x))
      (Œª x‚ÇÄ‚ÇÅ ‚Üí ind-in-U~ (b‚ÇÅ~‚Çö x‚ÇÄ‚ÇÅ ,Œ£ b‚ÇÅ~ x‚ÇÄ‚ÇÅ))
      (Œª x‚ÇÄ‚ÇÅ ‚Üí ind-in-U~ (b‚ÇÄ‚ÇÅ‚Çö x‚ÇÄ‚ÇÅ ,Œ£ b‚ÇÄ‚ÇÅ x‚ÇÄ‚ÇÅ))!}
    
-- this doesn't work because typing is not in Prop. to prove that typing is in hprop we need funext
