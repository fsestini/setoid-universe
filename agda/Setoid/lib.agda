{-# OPTIONS --without-K --prop #-}

module Setoid.lib where

-- it is not allowed to open this module outside of Setoid

open import Agda.Primitive

-- CwF

record Setoid i : Set (lsuc i) where
  field
    ‚à£_‚à£C : Set i
    _C_~_ : ‚à£_‚à£C ‚Üí ‚à£_‚à£C ‚Üí Prop i
    refC : ‚àÄ Œ≥ ‚Üí _C_~_ Œ≥ Œ≥
    symC : ‚àÄ{Œ≥ Œ≥'} ‚Üí _C_~_ Œ≥ Œ≥' ‚Üí _C_~_ Œ≥' Œ≥
    transC : ‚àÄ{Œ≥ Œ≥' Œ≥''} ‚Üí _C_~_ Œ≥ Œ≥' ‚Üí _C_~_ Œ≥' Œ≥'' ‚Üí _C_~_ Œ≥ Œ≥''
  infix 4 ‚à£_‚à£C
  infix 5 _C_~_
open Setoid public

record SetoidMor {i j}(Œì : Setoid i)(Œî : Setoid j) : Set (i ‚äî j) where
  field
    ‚à£_‚à£s : ‚à£ Œì ‚à£C ‚Üí ‚à£ Œî ‚à£C
    ~s   : {Œ≥ Œ≥' : ‚à£ Œì ‚à£C} ‚Üí Œì C Œ≥ ~ Œ≥' ‚Üí Œî C (‚à£_‚à£s Œ≥) ~ (‚à£_‚à£s Œ≥')
  infix 4 ‚à£_‚à£s
open SetoidMor public

record SetoidFam {i}(Œì : Setoid i) j : Set (i ‚äî lsuc j) where
  constructor mkTy
  field
    ‚à£_‚à£T_   : ‚à£ Œì ‚à£C ‚Üí Set j
    _T_‚ä¢_~_ : ‚àÄ{Œ≥ Œ≥'}(p : Œì C Œ≥ ~ Œ≥') ‚Üí ‚à£_‚à£T_ Œ≥ ‚Üí ‚à£_‚à£T_ Œ≥' ‚Üí Prop j
    refT    : ‚àÄ{Œ≥} Œ± ‚Üí _T_‚ä¢_~_ (refC Œì Œ≥) Œ± Œ±
    symT    : ‚àÄ{Œ≥ Œ≥'}{p : Œì C Œ≥ ~ Œ≥'}{Œ± : ‚à£_‚à£T_ Œ≥}{Œ±' : ‚à£_‚à£T_ Œ≥'}
            ‚Üí _T_‚ä¢_~_ p Œ± Œ±' ‚Üí _T_‚ä¢_~_ (symC Œì p) Œ±' Œ±
    transT  : ‚àÄ{Œ≥ Œ≥' Œ≥''}{p : Œì C Œ≥ ~ Œ≥'}{q : Œì C Œ≥' ~ Œ≥''}
              {Œ± : ‚à£_‚à£T_ Œ≥}{Œ±' : ‚à£_‚à£T_ Œ≥'}{Œ±'' : ‚à£_‚à£T_ Œ≥''}
            ‚Üí _T_‚ä¢_~_ p Œ± Œ±' ‚Üí _T_‚ä¢_~_ q Œ±' Œ±'' ‚Üí _T_‚ä¢_~_ (transC Œì p q) Œ± Œ±''
    coeT    : {Œ≥ Œ≥' : ‚à£ Œì ‚à£C} ‚Üí Œì C Œ≥ ~ Œ≥' ‚Üí ‚à£_‚à£T_ Œ≥ ‚Üí ‚à£_‚à£T_ Œ≥'
    cohT    : {Œ≥ Œ≥' : ‚à£ Œì ‚à£C}(p : Œì C Œ≥ ~ Œ≥')(Œ± : ‚à£_‚à£T_ Œ≥) ‚Üí _T_‚ä¢_~_ p Œ± (coeT p Œ±)
  infix 4 ‚à£_‚à£T_
  infix 5 _T_‚ä¢_~_
open SetoidFam public

record SetoidSec {i}(Œì : Setoid i){j}(A : SetoidFam Œì j) : Set (i ‚äî j) where
  field
    ‚à£_‚à£t : (Œ≥ : ‚à£ Œì ‚à£C) ‚Üí ‚à£ A ‚à£T Œ≥
    ~t   : {Œ≥ Œ≥' : ‚à£ Œì ‚à£C}(p : Œì C Œ≥ ~ Œ≥') ‚Üí A T p ‚ä¢ (‚à£_‚à£t Œ≥) ~ (‚à£_‚à£t Œ≥')
  infix 4 ‚à£_‚à£t
open SetoidSec public

record ‚ä§  : Set  where constructor tt

record Œ£ {‚Ñì ‚Ñì'} (A : Set ‚Ñì) (B : A ‚Üí Set ‚Ñì') : Set (‚Ñì ‚äî ‚Ñì') where
  constructor _,Œ£_
  field
    proj‚ÇÅ : A
    proj‚ÇÇ : B proj‚ÇÅ
infixl 5 _,Œ£_
_√ó_ : ‚àÄ{‚Ñì ‚Ñì'} ‚Üí Set ‚Ñì ‚Üí Set ‚Ñì' ‚Üí Set (‚Ñì ‚äî ‚Ñì')
A √ó B = Œ£ A Œª _ ‚Üí B
infixl 4 _√ó_
open Œ£ public

record Œ£p {‚Ñì ‚Ñì'} (A : Prop ‚Ñì) (B : A ‚Üí Prop ‚Ñì') : Prop (‚Ñì ‚äî ‚Ñì') where
  constructor _,p_
  field
    proj‚ÇÅp : A
    proj‚ÇÇp : B proj‚ÇÅp
infixl 5 _,p_
open Œ£p public
_√óp_ : ‚àÄ{‚Ñì ‚Ñì'} ‚Üí Prop ‚Ñì ‚Üí Prop ‚Ñì' ‚Üí Prop (‚Ñì ‚äî ‚Ñì')
A √óp B = Œ£p A Œª _ ‚Üí B
infixl 4 _√óp_

-- Pi

record Œ£sp {‚Ñì ‚Ñì'} (A : Set ‚Ñì) (B : A ‚Üí Prop ‚Ñì') : Set (‚Ñì ‚äî ‚Ñì') where
  constructor _,sp_
  field
    proj‚ÇÅsp : A
    proj‚ÇÇsp : B proj‚ÇÅsp
infixl 5 _,sp_
open Œ£sp public

record ‚Üëps {‚Ñì}(A : Prop ‚Ñì) : Set ‚Ñì where
  constructor mk‚Üëps
  field
    un‚Üëps : A
open ‚Üëps public

-- Empty

data ‚ä• : Set where

‚ä•elim : ‚àÄ{‚Ñì}{A : Set ‚Ñì} ‚Üí ‚ä• ‚Üí A
‚ä•elim ()

‚ä•elimp : ‚àÄ{‚Ñì}{A : Prop ‚Ñì} ‚Üí ‚ä• ‚Üí A
‚ä•elimp ()

-- Bool

data ‚ä•p : Prop where

data ùüö : Set where
  tt ff : ùüö

if_then_else_ : ‚àÄ{‚Ñì}{C : ùüö ‚Üí Set ‚Ñì}(b : ùüö)(c : C tt)(d : C ff) ‚Üí C b
if tt then c else d = c
if ff then c else d = d

pif_then_else_ : ‚àÄ{‚Ñì}{C : ùüö ‚Üí Prop ‚Ñì}(b : ùüö)(c : C tt)(d : C ff) ‚Üí C b
pif tt then c else d = c
pif ff then c else d = d

-- Props

record ‚Üëpl {‚Ñì ‚Ñì'}(A : Prop ‚Ñì) : Prop (‚Ñì ‚äî ‚Ñì') where
  constructor mk‚Üëpl
  field
    un‚Üëpl : A
open ‚Üëpl public

data Tr {i}(A : Set i) : Prop i where
  tr : A ‚Üí Tr A

untr : ‚àÄ{i j}{A : Set i}{B : Tr A ‚Üí Prop j} ‚Üí ((x : A) ‚Üí B (tr x)) ‚Üí (x : Tr A) ‚Üí B x
untr f (tr x) = f x

‚ä§p : Prop
‚ä§p = Tr ‚ä§

ttp : ‚ä§p
ttp = tr tt

‚ä•pelim : ‚àÄ{‚Ñì}{A : Set ‚Ñì} ‚Üí ‚ä•p ‚Üí A
‚ä•pelim ()
‚ä•pelimp : ‚àÄ{‚Ñì}{A : Prop ‚Ñì} ‚Üí ‚ä•p ‚Üí A
‚ä•pelimp ()

-- SeTT

record SetoidMor~ {i}(Œì : Setoid i){j}{Œ© : Setoid j}(œÉ‚ÇÄ œÉ‚ÇÅ : SetoidMor Œ© Œì) : Prop (i ‚äî j) where
  field
    ‚à£_‚à£ :  (Œ≥ : ‚à£ Œ© ‚à£C) ‚Üí  Œì C ‚à£ œÉ‚ÇÄ ‚à£s Œ≥ ~ ‚à£ œÉ‚ÇÅ ‚à£s Œ≥
open SetoidMor~ public

-- Id

module _ {i}{Œì : Setoid i}{j}(A : SetoidFam Œì j)(a : SetoidSec Œì A) where

  open import lib

  data ‚à£Id‚à£ : {Œ≥ : ‚à£ Œì ‚à£C} ‚Üí ‚à£ A ‚à£T Œ≥ ‚Üí Set (i ‚äî j) where
    ‚à£idp‚à£  : {Œ≥ : ‚à£ Œì ‚à£C} ‚Üí ‚à£Id‚à£ (‚à£ a ‚à£t Œ≥)
    coeId : ‚àÄ{Œ≥‚ÇÄ Œ≥‚ÇÅ}{Œ≥‚ÇÄ‚ÇÅ : Œì C Œ≥‚ÇÄ ~ Œ≥‚ÇÅ}{Œ±‚ÇÄ Œ±‚ÇÅ}(Œ±‚ÇÄ‚ÇÅ : A T Œ≥‚ÇÄ‚ÇÅ ‚ä¢ Œ±‚ÇÄ ~ Œ±‚ÇÅ)(p‚ÇÄ : ‚à£Id‚à£ Œ±‚ÇÄ) ‚Üí ‚à£Id‚à£ Œ±‚ÇÅ

  data Id~ : {Œ≥‚ÇÄ Œ≥‚ÇÅ : ‚à£ Œì ‚à£C}{Œ≥‚ÇÄ‚ÇÅ : Œì C Œ≥‚ÇÄ ~ Œ≥‚ÇÅ}{Œ±‚ÇÄ : ‚à£ A ‚à£T Œ≥‚ÇÄ}{Œ±‚ÇÅ : ‚à£ A ‚à£T Œ≥‚ÇÅ} ‚Üí A T Œ≥‚ÇÄ‚ÇÅ ‚ä¢ Œ±‚ÇÄ ~ Œ±‚ÇÅ ‚Üí ‚à£Id‚à£ Œ±‚ÇÄ ‚Üí ‚à£Id‚à£ Œ±‚ÇÅ ‚Üí Prop (i ‚äî j) where
    idp~ : ‚àÄ{Œ≥‚ÇÄ Œ≥‚ÇÅ}{Œ≥‚ÇÄ‚ÇÅ : Œì C Œ≥‚ÇÄ ~ Œ≥‚ÇÅ} ‚Üí Id~ (~t a Œ≥‚ÇÄ‚ÇÅ) ‚à£idp‚à£ ‚à£idp‚à£
    refId : ‚àÄ{Œ≥}{Œ± : ‚à£ A ‚à£T Œ≥} p ‚Üí Id~ (refT A Œ±) p p
    symId : ‚àÄ{Œ≥‚ÇÄ Œ≥‚ÇÅ}{Œ≥‚ÇÄ‚ÇÅ : Œì C Œ≥‚ÇÄ ~ Œ≥‚ÇÅ}{Œ±‚ÇÄ Œ±‚ÇÅ}{Œ±‚ÇÄ‚ÇÅ : A T Œ≥‚ÇÄ‚ÇÅ ‚ä¢ Œ±‚ÇÄ ~ Œ±‚ÇÅ}{p‚ÇÄ p‚ÇÅ} ‚Üí Id~ Œ±‚ÇÄ‚ÇÅ p‚ÇÄ p‚ÇÅ ‚Üí Id~ (symT A Œ±‚ÇÄ‚ÇÅ) p‚ÇÅ p‚ÇÄ
    transId : ‚àÄ{Œ≥‚ÇÄ Œ≥‚ÇÅ Œ≥‚ÇÇ}{Œ≥‚ÇÄ‚ÇÅ : Œì C Œ≥‚ÇÄ ~ Œ≥‚ÇÅ}{Œ≥‚ÇÅ‚ÇÇ : Œì C Œ≥‚ÇÅ ~ Œ≥‚ÇÇ}{Œ±‚ÇÄ Œ±‚ÇÅ Œ±‚ÇÇ}{Œ±‚ÇÄ‚ÇÅ : A T Œ≥‚ÇÄ‚ÇÅ ‚ä¢ Œ±‚ÇÄ ~ Œ±‚ÇÅ}{Œ±‚ÇÅ‚ÇÇ : A T Œ≥‚ÇÅ‚ÇÇ ‚ä¢ Œ±‚ÇÅ ~ Œ±‚ÇÇ}{p‚ÇÄ p‚ÇÅ p‚ÇÇ} ‚Üí
      Id~ Œ±‚ÇÄ‚ÇÅ p‚ÇÄ p‚ÇÅ ‚Üí Id~ Œ±‚ÇÅ‚ÇÇ p‚ÇÅ p‚ÇÇ ‚Üí Id~ (transT A Œ±‚ÇÄ‚ÇÅ Œ±‚ÇÅ‚ÇÇ) p‚ÇÄ p‚ÇÇ
    cohId : ‚àÄ{Œ≥‚ÇÄ Œ≥‚ÇÅ}{Œ≥‚ÇÄ‚ÇÅ : Œì C Œ≥‚ÇÄ ~ Œ≥‚ÇÅ}{Œ±‚ÇÄ Œ±‚ÇÅ}(Œ±‚ÇÄ‚ÇÅ : A T Œ≥‚ÇÄ‚ÇÅ ‚ä¢ Œ±‚ÇÄ ~ Œ±‚ÇÅ)(p‚ÇÄ : ‚à£Id‚à£ Œ±‚ÇÄ) ‚Üí Id~ Œ±‚ÇÄ‚ÇÅ p‚ÇÄ (coeId Œ±‚ÇÄ‚ÇÅ p‚ÇÄ)

-- Sets1

data in-U‚Çö : Set ‚Üí Set‚ÇÅ
data in-U~‚Çö : {A‚ÇÄ A‚ÇÅ : Set}(A‚ÇÄ‚ÇÅ : A‚ÇÄ ‚Üí A‚ÇÅ ‚Üí Prop) ‚Üí Set‚ÇÅ

data in-U‚Çö where
  bool‚Çö : in-U‚Çö ùüö
  œÄ‚Çö :
    {A : Set}(a‚Çö : in-U‚Çö A){A~ : A ‚Üí A ‚Üí Prop}(a~‚Çö : in-U~‚Çö A~)
    {B : A ‚Üí Set}(b‚Çö : (x : A) ‚Üí in-U‚Çö (B x))
    {B~ : {x‚ÇÄ x‚ÇÅ : A}(x‚ÇÄ‚ÇÅ : A~ x‚ÇÄ x‚ÇÅ) ‚Üí B x‚ÇÄ ‚Üí B x‚ÇÅ ‚Üí Prop}
    (b~‚Çö : {x‚ÇÄ x‚ÇÅ : A}(x‚ÇÄ‚ÇÅ : A~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~‚Çö (B~ x‚ÇÄ‚ÇÅ)) ‚Üí 
    in-U‚Çö (Œ£sp ((x : A) ‚Üí B x) (Œª f ‚Üí (x‚ÇÄ x‚ÇÅ : A)(x‚ÇÄ‚ÇÅ : A~ x‚ÇÄ x‚ÇÅ) ‚Üí B~ x‚ÇÄ‚ÇÅ (f x‚ÇÄ) (f x‚ÇÅ)))

data in-U~‚Çö where
  bool~‚Çö : in-U~‚Çö Œª x‚ÇÄ x‚ÇÅ ‚Üí if x‚ÇÄ then (if x‚ÇÅ then ‚ä§p else ‚ä•p) else (if x‚ÇÅ then ‚ä•p else ‚ä§p)
  œÄ~‚Çö :
    {A‚ÇÄ : Set}(a‚ÇÄ : in-U‚Çö A‚ÇÄ){A‚ÇÄ~ : A‚ÇÄ ‚Üí A‚ÇÄ ‚Üí Prop}(a‚ÇÄ~ : in-U~‚Çö A‚ÇÄ~)
    {A‚ÇÅ : Set}(a‚ÇÅ : in-U‚Çö A‚ÇÅ){A‚ÇÅ~ : A‚ÇÅ ‚Üí A‚ÇÅ ‚Üí Prop}(a‚ÇÅ~ : in-U~‚Çö A‚ÇÅ~)
    {A‚ÇÄ‚ÇÅ : A‚ÇÄ ‚Üí A‚ÇÅ ‚Üí Prop}(a‚ÇÄ‚ÇÅ : in-U~‚Çö A‚ÇÄ‚ÇÅ)

    {B‚ÇÄ : A‚ÇÄ ‚Üí Set}(b‚ÇÄ : (x : A‚ÇÄ) ‚Üí in-U‚Çö (B‚ÇÄ x))
      {B‚ÇÄ~ : {x‚ÇÄ x‚ÇÅ : A‚ÇÄ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ~ x‚ÇÄ x‚ÇÅ) ‚Üí B‚ÇÄ x‚ÇÄ ‚Üí B‚ÇÄ x‚ÇÅ ‚Üí Prop}
      (b‚ÇÄ~ : {x‚ÇÄ x‚ÇÅ : A‚ÇÄ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~‚Çö (B‚ÇÄ~ x‚ÇÄ‚ÇÅ))
    {B‚ÇÅ : A‚ÇÅ ‚Üí Set}(b‚ÇÅ : (x : A‚ÇÅ) ‚Üí in-U‚Çö (B‚ÇÅ x))
      {B‚ÇÅ~ : {x‚ÇÄ x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÅ~ x‚ÇÄ x‚ÇÅ) ‚Üí B‚ÇÅ x‚ÇÄ ‚Üí B‚ÇÅ x‚ÇÅ ‚Üí Prop}
      (b‚ÇÅ~ : {x‚ÇÄ x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÅ~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~‚Çö (B‚ÇÅ~ x‚ÇÄ‚ÇÅ))
    {B‚ÇÄ‚ÇÅ : {x‚ÇÄ : A‚ÇÄ}{x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ x‚ÇÄ x‚ÇÅ) ‚Üí B‚ÇÄ x‚ÇÄ ‚Üí B‚ÇÅ x‚ÇÅ ‚Üí Prop}
    (b‚ÇÄ‚ÇÅ : {x‚ÇÄ : A‚ÇÄ}{x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~‚Çö (B‚ÇÄ‚ÇÅ x‚ÇÄ‚ÇÅ)) ‚Üí 
     
    in-U~‚Çö
      {Œ£sp ((x : A‚ÇÄ) ‚Üí B‚ÇÄ x) (Œª f ‚Üí (x‚ÇÄ x‚ÇÅ : A‚ÇÄ)(x‚ÇÄ‚ÇÅ : A‚ÇÄ~ x‚ÇÄ x‚ÇÅ) ‚Üí B‚ÇÄ~ x‚ÇÄ‚ÇÅ (f x‚ÇÄ) (f x‚ÇÅ))}
      {Œ£sp ((x : A‚ÇÅ) ‚Üí B‚ÇÅ x) (Œª f ‚Üí (x‚ÇÄ x‚ÇÅ : A‚ÇÅ)(x‚ÇÄ‚ÇÅ : A‚ÇÅ~ x‚ÇÄ x‚ÇÅ) ‚Üí B‚ÇÅ~ x‚ÇÄ‚ÇÅ (f x‚ÇÄ) (f x‚ÇÅ))}
      (Œª {(f‚ÇÄ ,sp f‚ÇÄ~) (f‚ÇÅ ,sp f‚ÇÅ~) ‚Üí (x‚ÇÄ : A‚ÇÄ)(x‚ÇÅ : A‚ÇÅ)(x‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ x‚ÇÄ x‚ÇÅ) ‚Üí B‚ÇÄ‚ÇÅ x‚ÇÄ‚ÇÅ (f‚ÇÄ x‚ÇÄ) (f‚ÇÅ x‚ÇÅ)})

data in-U‚Çú : {A : Set} ‚Üí in-U‚Çö A ‚Üí Prop‚ÇÅ
data in-U~‚Çú : {A‚ÇÄ A‚ÇÅ : Set}(a‚ÇÄ : in-U‚Çö A‚ÇÄ)(a‚ÇÅ : in-U‚Çö A‚ÇÅ){A‚ÇÄ‚ÇÅ : A‚ÇÄ ‚Üí A‚ÇÅ ‚Üí Prop} ‚Üí in-U~‚Çö A‚ÇÄ‚ÇÅ ‚Üí Prop‚ÇÅ

data in-U‚Çú where
  bool‚Çú : in-U‚Çú bool‚Çö
  œÄ‚Çú :
    {A : Set}{a‚Çö : in-U‚Çö A}(a : in-U‚Çú a‚Çö){A~ : A ‚Üí A ‚Üí Prop}{a~‚Çö : in-U~‚Çö A~}(a~ : in-U~‚Çú a‚Çö a‚Çö a~‚Çö)
    {B : A ‚Üí Set}{b‚Çö : (x : A) ‚Üí in-U‚Çö (B x)}(b : (x : A) ‚Üí in-U‚Çú (b‚Çö x))
    {B~ : {x‚ÇÄ x‚ÇÅ : A}(x‚ÇÄ‚ÇÅ : A~ x‚ÇÄ x‚ÇÅ) ‚Üí B x‚ÇÄ ‚Üí B x‚ÇÅ ‚Üí Prop}
    {b~‚Çö : {x‚ÇÄ x‚ÇÅ : A}(x‚ÇÄ‚ÇÅ : A~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~‚Çö (B~ x‚ÇÄ‚ÇÅ)} ‚Üí
    (b~ : {x‚ÇÄ x‚ÇÅ : A}(x‚ÇÄ‚ÇÅ : A~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~‚Çú (b‚Çö x‚ÇÄ) (b‚Çö x‚ÇÅ) (b~‚Çö x‚ÇÄ‚ÇÅ)) ‚Üí
    in-U‚Çú (œÄ‚Çö a‚Çö a~‚Çö b‚Çö b~‚Çö)

data in-U~‚Çú where
  bool~‚Çú : in-U~‚Çú bool‚Çö bool‚Çö bool~‚Çö
  œÄ~‚Çú :
    {A‚ÇÄ : Set}{a‚ÇÄ‚Çö : in-U‚Çö A‚ÇÄ}(a‚ÇÄ : in-U‚Çú a‚ÇÄ‚Çö){A‚ÇÄ~ : A‚ÇÄ ‚Üí A‚ÇÄ ‚Üí Prop}{a‚ÇÄ~‚Çö : in-U~‚Çö A‚ÇÄ~}(a‚ÇÄ~ : in-U~‚Çú a‚ÇÄ‚Çö a‚ÇÄ‚Çö a‚ÇÄ~‚Çö)
    {A‚ÇÅ : Set}{a‚ÇÅ‚Çö : in-U‚Çö A‚ÇÅ}(a‚ÇÅ : in-U‚Çú a‚ÇÅ‚Çö){A‚ÇÅ~ : A‚ÇÅ ‚Üí A‚ÇÅ ‚Üí Prop}{a‚ÇÅ~‚Çö : in-U~‚Çö A‚ÇÅ~}(a‚ÇÅ~ : in-U~‚Çú a‚ÇÅ‚Çö a‚ÇÅ‚Çö a‚ÇÅ~‚Çö)
    {A‚ÇÄ‚ÇÅ : A‚ÇÄ ‚Üí A‚ÇÅ ‚Üí Prop}{a‚ÇÄ‚ÇÅ‚Çö : in-U~‚Çö A‚ÇÄ‚ÇÅ}(a‚ÇÄ‚ÇÅ : in-U~‚Çú a‚ÇÄ‚Çö a‚ÇÅ‚Çö a‚ÇÄ‚ÇÅ‚Çö)
    {B‚ÇÄ : A‚ÇÄ ‚Üí Set}{b‚ÇÄ‚Çö : (x : A‚ÇÄ) ‚Üí in-U‚Çö (B‚ÇÄ x)}(b‚ÇÄ : (x : A‚ÇÄ) ‚Üí in-U‚Çú (b‚ÇÄ‚Çö x))
    {B‚ÇÄ~ : {x‚ÇÄ x‚ÇÅ : A‚ÇÄ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ~ x‚ÇÄ x‚ÇÅ) ‚Üí B‚ÇÄ x‚ÇÄ ‚Üí B‚ÇÄ x‚ÇÅ ‚Üí Prop}
    {b‚ÇÄ~‚Çö : {x‚ÇÄ x‚ÇÅ : A‚ÇÄ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~‚Çö (B‚ÇÄ~ x‚ÇÄ‚ÇÅ)}
    (b‚ÇÄ~ : {x‚ÇÄ x‚ÇÅ : A‚ÇÄ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~‚Çú (b‚ÇÄ‚Çö x‚ÇÄ) (b‚ÇÄ‚Çö x‚ÇÅ) (b‚ÇÄ~‚Çö x‚ÇÄ‚ÇÅ))
    {B‚ÇÅ : A‚ÇÅ ‚Üí Set}{b‚ÇÅ‚Çö : (x : A‚ÇÅ) ‚Üí in-U‚Çö (B‚ÇÅ x)}(b‚ÇÅ : (x : A‚ÇÅ) ‚Üí in-U‚Çú (b‚ÇÅ‚Çö x))
    {B‚ÇÅ~ : {x‚ÇÄ x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÅ~ x‚ÇÄ x‚ÇÅ) ‚Üí B‚ÇÅ x‚ÇÄ ‚Üí B‚ÇÅ x‚ÇÅ ‚Üí Prop}
    {b‚ÇÅ~‚Çö : {x‚ÇÄ x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÅ~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~‚Çö (B‚ÇÅ~ x‚ÇÄ‚ÇÅ)}
    (b‚ÇÅ~ : {x‚ÇÄ x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÅ~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~‚Çú (b‚ÇÅ‚Çö x‚ÇÄ) (b‚ÇÅ‚Çö x‚ÇÅ) (b‚ÇÅ~‚Çö x‚ÇÄ‚ÇÅ))
    {B‚ÇÄ‚ÇÅ : {x‚ÇÄ : A‚ÇÄ}{x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ x‚ÇÄ x‚ÇÅ) ‚Üí B‚ÇÄ x‚ÇÄ ‚Üí B‚ÇÅ x‚ÇÅ ‚Üí Prop}
    {b‚ÇÄ‚ÇÅ‚Çö : {x‚ÇÄ : A‚ÇÄ}{x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~‚Çö  (B‚ÇÄ‚ÇÅ x‚ÇÄ‚ÇÅ)}
    (b‚ÇÄ‚ÇÅ : {x‚ÇÄ : A‚ÇÄ}{x‚ÇÅ : A‚ÇÅ}(x‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~‚Çú (b‚ÇÄ‚Çö x‚ÇÄ) (b‚ÇÅ‚Çö x‚ÇÅ) (b‚ÇÄ‚ÇÅ‚Çö x‚ÇÄ‚ÇÅ)) ‚Üí
    in-U~‚Çú (œÄ‚Çö a‚ÇÄ‚Çö a‚ÇÄ~‚Çö b‚ÇÄ‚Çö b‚ÇÄ~‚Çö) (œÄ‚Çö a‚ÇÅ‚Çö a‚ÇÅ~‚Çö b‚ÇÅ‚Çö b‚ÇÅ~‚Çö)
      (œÄ~‚Çö a‚ÇÄ‚Çö a‚ÇÄ~‚Çö a‚ÇÅ‚Çö a‚ÇÅ~‚Çö a‚ÇÄ‚ÇÅ‚Çö b‚ÇÄ‚Çö b‚ÇÄ~‚Çö b‚ÇÅ‚Çö b‚ÇÅ~‚Çö b‚ÇÄ‚ÇÅ‚Çö)
{-
ind-in-U‚Çú :
  ‚àÄ{i}{C : Prop i}
  {A : Set}{a‚Çö : in-U‚Çö A}{A~ : A ‚Üí A ‚Üí Prop}{a~‚Çö : in-U~‚Çö A~}
  {B : A ‚Üí Set}{b‚Çö : (x : A) ‚Üí in-U‚Çö (B x)}
  {B~ : {x‚ÇÄ x‚ÇÅ : A}(x‚ÇÄ‚ÇÅ : A~ x‚ÇÄ x‚ÇÅ) ‚Üí B x‚ÇÄ ‚Üí B x‚ÇÅ ‚Üí Prop}{b~‚Çö : {x‚ÇÄ x‚ÇÅ : A}(x‚ÇÄ‚ÇÅ : A~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~‚Çö (B~ x‚ÇÄ‚ÇÅ)} ‚Üí
  ((a : in-U‚Çú a‚Çö)(a~ : in-U~‚Çú a‚Çö a‚Çö a~‚Çö)(b : (x : A) ‚Üí in-U‚Çú (b‚Çö x))(b~ : {x‚ÇÄ x‚ÇÅ : A}(x‚ÇÄ‚ÇÅ : A~ x‚ÇÄ x‚ÇÅ) ‚Üí in-U~‚Çú (b‚Çö x‚ÇÄ) (b‚Çö x‚ÇÅ) (b~‚Çö x‚ÇÄ‚ÇÅ)) ‚Üí C) ‚Üí
  in-U‚Çú (œÄ‚Çö a‚Çö a~‚Çö b‚Çö b~‚Çö) ‚Üí C
ind-in-U‚Çú f w = {!w!} -- f a a~ b b~  -- (œÄ‚Çú a a~ b b~)
-}
_‚Üî_ : ‚àÄ{i j}(A : Prop i)(B : Prop j) ‚Üí Prop (i ‚äî j)
A ‚Üî B = (A ‚Üí B) √óp (B ‚Üí A)
